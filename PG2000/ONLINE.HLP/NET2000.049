%%
1,0:1
%%
.1
    Funktionen der NET2000-Library

  …ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕª
  ∫ ACHTUNG: Die Funktionen der NET2000-Library kînnen nur verwendet werden,  ∫
  ∫          wenn das B&R-Modul NET2000.BR im nullspannungssicheren Speicher  ∫
  ∫          (Anwender-ROM) der Steuerung vorhanden ist!                      ∫
  ∫          Nach dem öbertragen dieses B&R-Moduls in den nullspannungs-      ∫
  ∫          sicheren Speicher mu· ein KALTSTART (frÅher "TOTALINIT" genannt) ∫
  ∫          durchgefÅhrt werden.                                             ∫
  »ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº

    NET2000 ist ein Kommunikationsprotokoll zur Vernetzung von Systemen der
    RPS-Familie 2000 (B&R 2010, B&R 2005, B&R 2003 und Panelware). FÅr NET2000
    wird keine zusÑtzliche Hardware benîtigt, es genÅgen die Schnittstellen
    der jeweiligen Zentraleinheiten, Schnittstellenmodule, Multiprozessoren,
    Parallelprozessoren bzw. intelligenten I/O-Prozessoren. Das Protokoll ist
    auf grî·tmîglichen Datendurchsatz ausgerichtet.
    Die nachfolgend beschriebenen Funktionsblîcke (FUBs) kînnen eine Lese- bzw.
    Schreib-Anforderung (Read- bzw. Write-Request) absetzen. Die Parametrierung
    erfolgt Åber eine angeschlossene Tabelle bzw. Åber eine Struktur mit vor-
    definiertem Format.
                                     @002[ Fortsetzung ]               @999[ HILFE beenden ]
.2
    Funktionen der NET2000-Library (Fortsetzung)

    Nach dem Importieren der NET2000-Library stehen Ihnen folgende Funktionen
    zur VerfÅgung:

    @020[NET2read ] NET2000 - zyklisches Lesen von PVs
    @050[NET2write] NET2000 - zyklisches Schreiben auf PVs

    Es kînnen mehrere Funktionsblîcke gleichzeitig aktiv sein. Die Funktions-
    blîcke kînnen sowohl am Master als auch am Slave mit Querverkehr verwendet
    werden (Querverkehr kann nur bei aktivem Master im Kontext einer Layer2-
    Response vom Slave angefordert werden, d.h. der Slave mu· zyklisch vom
    Master gepollt werden).








                                       @200[ ANHANG ]                      @001[ öbersicht ]
.20
    NET2read - zyklisches Lesen von PVs

    NET2read (enable,destadr,adr(pvlist),pvnum,adr(dataarea),datlng,ok,
              status,record,reqcnt,rqdatlng)

    Parameter-Datentypen :
    ->  @025[enable    ]: BIT           Der Funktionsblock wird nur ausgefÅhrt, wenn
                                  enable = 1 ist.
    ->  @026[destadr   ]: INT32         Nummer der Station, von der Daten gelesen
                                  werden sollen (Stationsnummer).
    ->  @027[pvlist    ]: @350[ALLE]          Auftragsliste. Die Auftragsliste kann ent-
                                  weder Åber ein Struktur-Feld oder ein Daten-
                                  modul realisiert werden.
    ->  @028[pvnum     ]: WORD          Low-Byte .... Anzahl der AuftrÑge in der
                                                Auftragsliste
                                  High-Byte ... Netzwerk-Nummer
    <-> @029[dataarea  ]: @350[ALLE]          Speicherbereich, auf den die gelesenen Daten
                                  kopiert werden.
    ->  @030[datlng    ]: WORD          Grî·e des Speicherbereichs ("dataarea") in
                                  Byte.

                                     @021[ Fortsetzung ]                   @001[ öbersicht ]
.21
    NET2read - zyklisches Lesen von PVs (Fortsetzung)

    Parameter-Datentypen (Fortsetzung) :
    <-  @031[ok        ]: BIT           Lese-Auftrag abgeschlossen.
    <-  @032[status    ]: WORD          Fehlernummer (0 = kein Fehler)
    <-  @034[record    ]: LONG          Nummer des gerade bearbeiteten Auftrags
                                  (Get-OV).
    <-  @035[reqcnt    ]: LONG          Request-ZÑhler (wird bei jedem erfolgreichen
                                  Lese-Zyklus inkrementiert).
    <-  @036[rqdatlng  ]: WORD          TatsÑchliche LÑnge der gerade bearbeiteten
                                  Proze·variable (Get-OV).

    Bei jeder Aktivierung dieser Funktion wird ein Kommunikationsdienst (GetOV
    oder Read-Request) abgesetzt, falls kein Response ausstÑndig ist.







                                                                     @001[ öbersicht ]
.25
    NET2read - zyklisches Lesen von PVs (Fortsetzung)

    -> Parameter <enable    >: BIT

    Wenn sich der Wert des Eingangsparameters "enable" von 0 auf 1 Ñndert
    (positive Flanke), wird der Funktionsblock NET2read() aktiviert.
    öber den Get-OV-Dienst wird versucht, die notwendigen Informationen Åber
    die Datenpunkte (Proze·variablen) in der Auftragsliste ("pvlist") zu er-
    halten. Kann der Get-OV-Dienst fehlerfrei durchgefÅhrt werden, so werden
    die Datenpunkte zyklisch gelesen und in den Speicherbereich "dataarea"
    kopiert, bis der Eingangsparameter "enable" wieder zurÅckgesetzt wird.










                                      @020[ NET2read ]                     @001[ öbersicht ]
.26
    NET2read - zyklisches Lesen von PVs (Fortsetzung)

    -> Parameter <destadr   >: INT32

    Mit diesem Parameter wird die Nummer der NET2000-Station, von der Daten
    gelesen werden sollen, festgelegt. Um dem Funktionsblock NET2read() mit-
    zuteilen, ob zur Definition der Variablen ein Struktur-Feld oder ein
    Datenmodul verwendet wird, wird das Vorzeichen der Stationsnummer ver-
    wendet:
    Sollen die Variablen mit einem Struktur-Feld definiert werden, wird die
    Stationsnummer negativ angegeben (z.B. -7 fÅr Station 7). FÅr "adr(pvlist)"
    wird in diesem Fall die Adresse der Struktur angegeben.
    Ist die Stationsnummer positiv, so sind die Datentransfers in einem Daten-
    modul definiert. In diesem Fall wird fÅr den "adr(pvlist)" die Startadresse
    des Datenmoduls angegeben. Die Startadresse eines Datenmoduls kînnen Sie
    mit der Funktion DA_info() (siehe BURTRAP-Library) ermitteln.





                                      @020[ NET2read ]                     @001[ öbersicht ]
.27
    NET2read - zyklisches Lesen von PVs (Fortsetzung)

    -> Parameter <pvlist    >: @350[ALLE] (beliebiger Datentyp)

    FÅr "adr(pvlist)" (Auftragsliste) wird entweder die Adresse eines Struktur-
    Feldes mit bis zu 6 Elementen (ein Element pro Proze·variable) oder die
    Startadresse eines Datenmoduls mit bis zu 6 EintrÑgen (ein Eintrag pro
    Proze·variable) angegeben (siehe Parameter @026[destadr]).

    Format der Struktur:
    pvlng    : WORD               LÑnge der Proze·variable (Angabe in Byte)
    pvname   : 32 BYTE (FELD)     Name der Proze·variable (String).

    Format des Datenmoduls:
    $0002, "PVword",
    $0020, "PVlng20"
    ƒƒ¬ƒƒ  ƒƒƒƒ¬ƒƒƒƒ 
      ≥        ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ LÑnge der Proze·variable (WORD)
      ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ Name der Proze·variable (String)


                                      @020[ NET2read ]                     @001[ öbersicht ]
.28
    NET2read - zyklisches Lesen von PVs (Fortsetzung)

    -> Parameter <pvnum     >: WORD

    Low-Byte .... Gesamtanzahl der Proze·variablen (PVs), die in der Auftrags-
                  liste enthalten sind (Gesamtanzahl der zu lesenden PVs).
    High-Byte ... @280[Nummer des NET2000-Netzwerks] (0 bis 3).
                  Um mehrere Netzwerke konfigurieren zu kînnen, werden fÅr
                  jedes Netzwerk eigene Konfigurationsvariablen benîtigt.
                  öber die Struktur NET2000 kann nur ein Netzwerk betreut
                  werden. Mit einem Feld von Strukturen besteht die Mîglich-
                  keit, mehrere NET2000-Netzwerke zu betreuen.









                                      @020[ NET2read ]                     @001[ öbersicht ]
.29
    NET2read - zyklisches Lesen von PVs (Fortsetzung)

    <->Parameter <dataarea  >: @350[ALLE] (beliebiger Datentyp)

    Speicherbereich, auf den die gelesenen Daten kopiert werden.
    öber den Speicherbereich kann eine Struktur mit den Datentypen der ge-
    lesenen Variablen gelegt werden. Damit werden Zugriffe fÅr die Weiter-
    verarbeitung vereinfacht. Diese Vorgangsweise sollte jedoch nur ange-
    wendet werden, wenn die Auftragsliste als Datenmodul realisiert ist
    (eine ErklÑrung dazu finden Sie im folgenden Absatz).

    ACHTUNG:
    Wenn die Auftragsliste als Struktur-Feld realisiert ist, und Åber diese
    Liste mehrere Variablen gleichzeitig gelesen bzw. geschrieben werden,
    wird im Speicherbereich "dataarea" keine WORD-AUSRICHTUNG vorgenommen!
    D.h. bei einem Lese-Auftrag fÅr eine BYTE- und eine WORD-Variable wird
    der Wert der WORD-Variable im Speicher unmittelbar hinter dem Wert der
    BYTE-Variable abgelegt. Die WORD-Variable beginnt also an einer UNGERADEN
    Adresse. Wird in diesem Fall Åber den Speicherbereich eine Struktur ge-
    legt, fÅhrt das zu Fehlern, da fÅr Strukturen IMMER die WORD-Ausrichtung
    verwendet wird.
                                      @020[ NET2read ]                     @001[ öbersicht ]
.30
    NET2read - zyklisches Lesen von PVs (Fortsetzung)

    -> Parameter <datlng    >: WORD

    GesamtlÑnge der zu lesenden Daten in Byte (LÑnge von "dataarea").
















                                      @020[ NET2read ]                     @001[ öbersicht ]
.31
    NET2read - zyklisches Lesen von PVs (Fortsetzung)

    <- Parameter <ok        >: BIT

    Der Ausgangsparameter "ok" wird fÅr einen Zyklus auf logisch 1 gesetzt,
    wenn die Daten erfolgreich gelesen wurden. Im nÑchsten Zyklus wird die
    nÑchste Lese-Anforderung (Request) abgesetzt.














                                      @020[ NET2read ]                     @001[ öbersicht ]
.32
    NET2read - zyklisches Lesen von PVs (Fortsetzung)

    <- Parameter <status    >: WORD

    EnthÑlt im Fehlerfall eine Fehlernummer (0 = kein Fehler).
    Die folgenden Fehlernummern werden vom Funktionsblock generiert und im
    Fehlerfall am Ausgang "status" ausgegeben:

    20000   Kein NET2000-Manager installiert
    20001   Fehler im LÑngenvergleich - Get-OV
            (Verglichen wird die tatsÑchliche LÑnge der Proze·variable mit
            der LÑnge in "pvlist")
    20002   Objekt existiert nicht auf der Zielstation
    20003   Kommunikationsfehler
    20004   NET2000-Manager kann nicht gestartet werden bzw.
            NET2000.station ist nicht definiert
    20005   Zu viele Proze·variablen (PVs) pro Funktionsblock (maximale PV-
            Anzahl pro Funktionsblock = 6)



                                     @033[ Fortsetzung ]                   @001[ öbersicht ]
.33
    NET2read - zyklisches Lesen von PVs (Fortsetzung)

    Die folgenden Fehlernummern werden im NET2000-Protokoll generiert und im
    Fehlerfall am Ausgang "status" ausgegeben:

    $07     Fehlerantwort des CLIENTS - Layer7 (lokal)
    $04     Fehlerantwort des CLIENTS - Layer4 (lokal)
    $02     Fehlerantwort des CLIENTS - Layer2 (lokal)
    $17     Fehlerantwort des SERVERS - Layer7 (Kommunikationspartner)
    $14     Fehlerantwort des SERVERS - Layer4 (Kommunikationspartner)
    $12     Fehlerantwort des SERVERS - Layer2 (Kommunikationspartner)

    Wird im zyklischen Betrieb des Funktionsblocks ein Fehler direkt aus dem
    NET2000-Protokoll ausgelesen, so wird am Ausgang "@036[rqdatlng]" eine detail-
    liertere Fehlerinformation ausgegeben.






                                      @020[ NET2read ]                     @001[ öbersicht ]
.34
    NET2read - zyklisches Lesen von PVs (Fortsetzung)

    <- Parameter <record    >: LONG

    In der Get-OV-Phase wird hier die Nummer (beginnend mit 1) des gerade be-
    arbeiteten PV-Eintrags der Auftragsliste ("pvlist") ausgegeben. Im Fehler-
    fall kann durch diese Nummer die fehlerhafte Proze·variable lokalisiert
    werden.
    Dieser Parameter ist nur relevant, wenn der Lesevorgang unterbrochen wird,
    oder ein öbertragungsfehler auftritt!











                                      @020[ NET2read ]                     @001[ öbersicht ]
.35
    NET2read - zyklisches Lesen von PVs (Fortsetzung)

    <- Parameter <reqcnt    >: LONG

    Bei jedem erfolgreichen Lese-Zyklus wird diese Variable inkrementiert
    (um 1 erhîht).
    Der Parameter "reqcnt" dient zur Fehleranalyse. D.h. dieser Parameter
    ist nur relevant, wenn der Lesevorgang unterbrochen wird, oder ein öber-
    tragungsfehler auftritt!












                                      @020[ NET2read ]                     @001[ öbersicht ]
.36
    NET2read - zyklisches Lesen von PVs (Fortsetzung)

    <- Parameter <rqdatlng  >: WORD

    In der Get-OV-Phase wird hier die DatenlÑnge der gerade bearbeiteten
    Proze·variable ausgegeben. Die tatsÑchliche LÑnge der PV kann somit im
    Fehlerfall (20001) festgestellt werden.
    Der Parameter "rqdatlng" dient zur Fehleranalyse. D.h. dieser Parameter
    ist nur relevant, wenn der Lesevorgang unterbrochen wird, oder ein öber-
    tragungsfehler auftritt!











                                     @037[ Fortsetzung ]                   @001[ öbersicht ]
.37
    NET2read - zyklisches Lesen von PVs (Fortsetzung)

    Wird im zyklischen Betrieb des Funktionsblocks ein Fehler direkt aus dem
    NET2000-Protokoll ausgelesen, so wird am Ausgang "rqdatlng" eine detail-
    liertere Fehlerinformation ausgegeben:

    $01     Kein L7-Response-Puffer entsprechender Grî·e vorhanden
    $02     Objekt-Indexfehler / Index in der Indexliste des Servers nicht
            belegt
    $03     L7-Dienst (Servicecode) wird nicht unterstÅtzt
    $04     Adressierter Kanal existiert nicht
            (Antwort mit Åbergebener Kanalnummer)
    $05     Fehlerhafte Syntax fÅr ereignisgetriebenes Objekt (Eventliste)
    $06     Kein Eventmanager installiert
    $07     Eventliste zu klein konfiguriert
    $08     Objekt ist keine Struktur
    $09     Fehler aus Objektstruktur lesen
    $0A     Anderer "Master" als der "Event-Master" versucht eventgesteuerte
            PVs anzumelden
    $0B     Objekt-Indexfehler / Index out of Range

                                     @038[ Fortsetzung ]                   @001[ öbersicht ]
.38
    NET2read - zyklisches Lesen von PVs (Fortsetzung)

    $0C     Kein L7-Request-Puffer entsprechender Grî·e vorhanden
    $0D     Kein L7(L4)-Confirmation-Puffer entsprechender Grî·e vorhanden
    $0E     Kein L7(L4)-Indication-Puffer entsprechender Grî·e vorhanden
    $0F     Null-Pointer-Zugriff Åber eine dynamische Variable

    Anmerkung: Wenn "status" = $17 und "rqdatlng" = $02, mu· der Get-OV-Dienst
               erneut durchgefÅhrt werden.












                                      @020[ NET2read ]                     @001[ öbersicht ]
.50
    NET2write - zyklisches Beschreiben von PVs

    NET2write (enable,destadr,adr(pvlist),pvnum,adr(dataarea),datlng,ok,
               status,record,reqcnt,rqdatlng)

    Parameter-Datentypen :
    ->  @055[enable    ]: BIT           Der Funktionsblock wird nur ausgefÅhrt, wenn
                                  enable = 1 ist.
    ->  @056[destadr   ]: INT32         Nummer der Station, auf die Daten Åbertragen
                                  werden sollen (Stationsnummer).
    ->  @057[pvlist    ]: @350[ALLE]          Auftragsliste. Die Auftragsliste kann ent-
                                  weder Åber ein Struktur-Feld oder ein Daten-
                                  modul realisiert werden.
    ->  @058[pvnum     ]: WORD          Low-Byte .... Anzahl der AuftrÑge in der
                                                Auftragsliste
                                  High-Byte ... Netzwerk-Nummer
    ->  @059[dataarea  ]: @350[ALLE]          Speicherbereich, in den die zu schreibenden
                                  Daten eingetragen werden.
    ->  @061[datlng    ]: WORD          Grî·e des Speicherbereichs ("dataarea") in
                                  Byte.

                                     @051[ Fortsetzung ]                   @001[ öbersicht ]
.51
    NET2write - zyklisches Beschreiben von PVs (Fortsetzung)

    Parameter-Datentypen (Fortsetzung) :
    <-  @062[ok        ]: BIT           Schreib-Auftrag abgeschlossen.
    <-  @063[status    ]: WORD          Fehlernummer (0 = kein Fehler)
    <-  @065[record    ]: LONG          Nummer des gerade bearbeiteten Auftrags
                                  (Get-OV).
    <-  @066[reqcnt    ]: LONG          Request-ZÑhler (wird bei jedem erfolgreichen
                                  Schreib-Zyklus inkrementiert).
    <-  @067[rqdatlng  ]: WORD          TatsÑchliche LÑnge der gerade bearbeiteten
                                  Proze·variable (Get-OV).

    Bei jeder Aktivierung dieser Funktion wird ein Kommunikationsdienst (GetOV
    oder Write-Request) abgesetzt, falls kein Response ausstÑndig ist.







                                                                     @001[ öbersicht ]
.55
    NET2write - zyklisches Beschreiben von PVs (Fortsetzung)

    -> Parameter <enable    >: BIT

    Wenn sich der Wert des Eingangsparameters "enable" von 0 auf 1 Ñndert
    (positive Flanke), wird der Funktionsblock NET2write() aktiviert.
    öber den Get-OV-Dienst wird versucht, die notwendigen Informationen Åber
    die Datenpunkte (Proze·variablen) in der Auftragsliste ("pvlist") zu er-
    halten. Kann der Get-OV-Dienst fehlerfrei durchgefÅhrt werden, so werden
    die Datenpunkte zyklisch mit den im Speicherbereich "dataarea" abgelegten
    Daten beschrieben, bis der Eingangsparameter "enable" wieder zurÅckgesetzt
    wird.









                                      @050[ NET2write ]                    @001[ öbersicht ]
.56
    NET2write - zyklisches Beschreiben von PVs (Fortsetzung)

    -> Parameter <destadr   >: INT32

    Mit diesem Parameter wird die Nummer der NET2000-Station, auf die Daten
    Åbertragen werden sollen, festgelegt. Um dem Funktionsblock NET2write()
    mitzuteilen, ob zur Definition der Variablen ein Struktur-Feld oder ein
    Datenmodul verwendet wird, wird das Vorzeichen der Stationsnummer ver-
    wendet:
    Sollen die Variablen mit einem Struktur-Feld definiert werden, wird die
    Stationsnummer negativ angegeben (z.B. -7 fÅr Station 7). FÅr "adr(pvlist)"
    wird in diesem Fall die Adresse der Struktur angegeben.
    Ist die Stationsnummer positiv, so sind die Datentransfers in einem Daten-
    modul definiert. In diesem Fall wird fÅr den "adr(pvlist)" die Startadresse
    des Datenmoduls angegeben. Die Startadresse eines Datenmoduls kînnen Sie
    mit der Funktion DA_info() (siehe BURTRAP-Library) ermitteln.





                                      @050[ NET2write ]                    @001[ öbersicht ]
.57
    NET2write - zyklisches Beschreiben von PVs (Fortsetzung)

    -> Parameter <pvlist    >: @350[ALLE] (beliebiger Datentyp)

    FÅr "adr(pvlist)" (Auftragsliste) wird entweder die Adresse eines Struktur-
    Feldes mit bis zu 6 Elementen (ein Element pro Proze·variable) oder die
    Startadresse eines Datenmoduls mit bis zu 6 EintrÑgen (ein Eintrag pro
    Proze·variable) angegeben (siehe Parameter @056[destadr]).

    Format der Struktur:
    pvlng    : WORD               LÑnge der Proze·variable (Angabe in Byte)
    pvname   : 32 BYTE (FELD)     Name der Proze·variable (String).

    Format des Datenmoduls:
    $0002, "PVword",
    $0020, "PVlng20"
    ƒƒ¬ƒƒ  ƒƒƒƒ¬ƒƒƒƒ 
      ≥        ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ LÑnge der Proze·variable (WORD)
      ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ Name der Proze·variable (String)


                                      @050[ NET2write ]                    @001[ öbersicht ]
.58
    NET2write - zyklisches Beschreiben von PVs (Fortsetzung)

    -> Parameter <pvnum     >: WORD

    Low-Byte .... Gesamtanzahl der Proze·variablen (PVs), die in der Auftrags-
                  liste enthalten sind (Gesamtanzahl der zu beschreibenden
                  PVs).
    High-Byte ... @280[Nummer des NET2000-Netzwerks] (0 bis 3).
                  Um mehrere Netzwerke konfigurieren zu kînnen, werden fÅr
                  jedes Netzwerk eigene Konfigurationsvariablen benîtigt.
                  öber die Struktur NET2000 kann nur ein Netzwerk betreut
                  werden. Mit einem Feld von Strukturen besteht die Mîglich-
                  keit, mehrere NET2000-Netzwerke zu betreuen.








                                      @050[ NET2write ]                    @001[ öbersicht ]
.59
    NET2write - zyklisches Beschreiben von PVs (Fortsetzung)

    -> Parameter <dataarea  >: @350[ALLE] (beliebiger Datentyp)

    Speicherbereich, in den die zu schreibenden Daten eingetragen werden.
    öber den Speicherbereich kann eine Struktur mit den Datentypen der zu
    schreibenden Variablen gelegt werden. Damit werden Zugriffe fÅr die
    Weiterverarbeitung vereinfacht. Diese Vorgangsweise sollte jedoch nur
    angewendet werden, wenn die Auftragsliste als Datenmodul realisiert ist
    (eine ErklÑrung dazu finden Sie im folgenden Absatz).

    ACHTUNG:
    Wenn die Auftragsliste als Struktur-Feld realisiert ist, und Åber diese
    Liste mehrere Variablen gleichzeitig gelesen bzw. geschrieben werden,
    wird im Speicherbereich "dataarea" keine WORD-AUSRICHTUNG vorgenommen!
    D.h. bei einem Lese-Auftrag fÅr eine BYTE- und eine WORD-Variable wird
    der Wert der WORD-Variable im Speicher unmittelbar hinter dem Wert der
    BYTE-Variable abgelegt. Die WORD-Variable beginnt also an einer UNGERADEN
    Adresse. Wird in diesem Fall Åber den Speicherbereich eine Struktur ge-
    legt, fÅhrt das zu Fehlern, da fÅr Strukturen IMMER die WORD-Ausrichtung
    verwendet wird.
                                     @060[ Fortsetzung ]                   @001[ öbersicht ]
.60
    NET2write - zyklisches Beschreiben von PVs (Fortsetzung)

    ACHTUNG:
    Auf Grund des asynchronen Aufbaus der NET2000-Kommunikation ist nicht
    gewÑhrleistet, da· nach dem Absetzen einer Schreib-Anforderung (Write-
    Request) die Daten vom NET2000-Manager auch schon Åbernommen worden sind.
    D.h. die zu schreibenden Daten dÅrfen nach einer abgesetzten Schreib-
    Anforderung (Write-Request) noch nicht geÑndert werden, es darf jedoch
    bereits eine andere Adresse fÅr "dataarea" angeschlossen werden. Damit
    mîglichst schnelles synchronisiertes Schreiben durchgefÅhrt werden kann,
    mu· der Anwender mit zwei Speicherbereichen arbeiten, deren Adressen ab-
    wechselnd (nachdem der Ausgangsparameter "ok" auf 1 gesetzt wurde) an
    "dataarea" angeschlossen werden.








                                      @050[ NET2write ]                    @001[ öbersicht ]
.61
    NET2write - zyklisches Beschreiben von PVs (Fortsetzung)

    -> Parameter <datlng    >: WORD

    GesamtlÑnge der zu schreibenden Daten in Byte (LÑnge von "dataarea").
















                                      @050[ NET2write ]                    @001[ öbersicht ]
.62
    NET2write - zyklisches Beschreiben von PVs (Fortsetzung)

    <- Parameter <ok        >: BIT

    Der Ausgangsparameter "ok" wird nach einem erfolgreichen Schreib-Zyklus
    (Write-Response erhalten) fÅr einen Zyklus auf logisch 1 gesetzt. Im
    nÑchsten Zyklus wird die nÑchste Schreib-Anforderung (Request) abgesetzt.














                                      @050[ NET2write ]                    @001[ öbersicht ]
.63
    NET2write - zyklisches Beschreiben von PVs (Fortsetzung)

    <- Parameter <status    >: WORD

    EnthÑlt im Fehlerfall eine Fehlernummer (0 = kein Fehler).
    Die folgenden Fehlernummern werden vom Funktionsblock generiert und im
    Fehlerfall am Ausgang "status" ausgegeben:

    20000   Kein NET2000-Manager installiert
    20001   Fehler im LÑngenvergleich - Get-OV
            (Verglichen wird die tatsÑchliche LÑnge der Proze·variable mit
            der LÑnge in "pvlist")
    20002   Objekt existiert nicht auf der Zielstation
    20003   Kommunikationsfehler
    20004   NET2000-Manager kann nicht gestartet werden bzw.
            NET2000.station ist nicht definiert
    20005   Zu viele Proze·variablen (PVs) pro Funktionsblock (maximale PV-
            Anzahl pro Funktionsblock = 6)



                                     @064[ Fortsetzung ]                   @001[ öbersicht ]
.64
    NET2write - zyklisches Beschreiben von PVs (Fortsetzung)

    Die folgenden Fehlernummern werden im NET2000-Protokoll generiert und im
    Fehlerfall am Ausgang "status" ausgegeben:

    $07     Fehlerantwort des CLIENTS - Layer7 (lokal)
    $04     Fehlerantwort des CLIENTS - Layer4 (lokal)
    $02     Fehlerantwort des CLIENTS - Layer2 (lokal)
    $17     Fehlerantwort des SERVERS - Layer7 (Kommunikationspartner)
    $14     Fehlerantwort des SERVERS - Layer4 (Kommunikationspartner)
    $12     Fehlerantwort des SERVERS - Layer2 (Kommunikationspartner)

    Wird im zyklischen Betrieb des Funktionsblocks ein Fehler direkt aus dem
    NET2000-Protokoll ausgelesen, so wird am Ausgang "@067[rqdatlng]" eine detail-
    liertere Fehlerinformation ausgegeben.






                                      @050[ NET2write ]                    @001[ öbersicht ]
.65
    NET2write - zyklisches Beschreiben von PVs (Fortsetzung)

    <- Parameter <record    >: LONG

    In der Get-OV-Phase wird hier die Nummer (beginnend mit 1) des gerade be-
    arbeiteten PV-Eintrags der Auftragsliste ("pvlist") ausgegeben. Im Fehler-
    fall kann durch diese Nummer die fehlerhafte Proze·variable lokalisiert
    werden.
    Dieser Parameter ist nur relevant, wenn der Schreibvorgang unterbrochen
    wird, oder ein öbertragungsfehler auftritt!











                                      @050[ NET2write ]                    @001[ öbersicht ]
.66
    NET2write - zyklisches Beschreiben von PVs (Fortsetzung)

    <- Parameter <reqcnt    >: LONG

    Bei jedem erfolgreichen Schreib-Zyklus wird diese Variable inkrementiert
    (um 1 erhîht).
    Der Parameter "reqcnt" dient zur Fehleranalyse. D.h. dieser Parameter
    ist nur relevant, wenn der Schreibvorgang unterbrochen wird, oder ein
    öbertragungsfehler auftritt!












                                      @050[ NET2write ]                    @001[ öbersicht ]
.67
    NET2write - zyklisches Beschreiben von PVs (Fortsetzung)

    <- Parameter <rqdatlng  >: WORD

    In der Get-OV-Phase wird hier die DatenlÑnge der gerade bearbeiteten
    Proze·variable ausgegeben. Die tatsÑchliche LÑnge der PV kann somit im
    Fehlerfall (20001) festgestellt werden.
    Der Parameter "rqdatlng" dient zur Fehleranalyse. D.h. dieser Parameter
    ist nur relevant, wenn der Schreibvorgang unterbrochen wird, oder ein
    öbertragungsfehler auftritt!











                                     @068[ Fortsetzung ]                   @001[ öbersicht ]
.68
    NET2write - zyklisches Beschreiben von PVs (Fortsetzung)

    Wird im zyklischen Betrieb des Funktionsblocks ein Fehler direkt aus dem
    NET2000-Protokoll ausgelesen, so wird am Ausgang "rqdatlng" eine detail-
    liertere Fehlerinformation ausgegeben:

    $01     Kein L7-Response-Puffer entsprechender Grî·e vorhanden
    $02     Objekt-Indexfehler / Index in der Indexliste des Servers nicht
            belegt
    $03     L7-Dienst (Servicecode) wird nicht unterstÅtzt
    $04     Adressierter Kanal existiert nicht
            (Antwort mit Åbergebener Kanalnummer)
    $05     Fehlerhafte Syntax fÅr ereignisgetriebenes Objekt (Eventliste)
    $06     Kein Eventmanager installiert
    $07     Eventliste zu klein konfiguriert
    $08     Objekt ist keine Struktur
    $09     Fehler aus Objektstruktur lesen
    $0A     Anderer "Master" als der "Event-Master" versucht eventgesteuerte
            PVs anzumelden
    $0B     Objekt-Indexfehler / Index out of Range

                                     @069[ Fortsetzung ]                   @001[ öbersicht ]
.69
    NET2write - zyklisches Beschreiben von PVs (Fortsetzung)

    $0C     Kein L7-Request-Puffer entsprechender Grî·e vorhanden
    $0D     Kein L7(L4)-Confirmation-Puffer entsprechender Grî·e vorhanden
    $0E     Kein L7(L4)-Indication-Puffer entsprechender Grî·e vorhanden
    $0F     Null-Pointer-Zugriff Åber eine dynamische Variable

    Anmerkung: Wenn "status" = $17 und "rqdatlng" = $02, mu· der Get-OV-Dienst
               erneut durchgefÅhrt werden.












                                      @050[ NET2write ]                    @001[ öbersicht ]
.200
    ANHANG : LIBRARY-Informationen


    @205[< Allgemeines           >]     Voraussetzungen, Installation etc.

    @210[< NET2000-Protokoll     >]     NET2000-Protokollbeschreibung

    @220[< Konfiguration         >]     Konfiguration des NET2000-Managers

    @290[< UnterstÅtzte Hardware >]     UnterstÅtzte Schnittstellen

    @300[< Proze·variablen       >]     GÅltige Syntax fÅr Proze·variablen

    @310[< Eventvariablen        >]     Syntax fÅr Eventvariablen

    @320[< Transportmedien       >]     NET2000-seriell, NET2000-CAN

    @340[< Taskklassen-Kontext   >]     Zyklische Beauftragung von NET2000 im
                                  Taskklassen-Kontext


                                     @201[ Fortsetzung ]                   @001[ öbersicht ]
.201
    ANHANG : LIBRARY-Informationen (Fortsetzung)


    @345[< OV-Server             >]     Zeitaufwendige Dienste werden au·erhalb des
                                  Taskklassen-Kontexts vom OV-Server behandelt

    @350[< Syntax                >]     Syntax fÅr die ErklÑrung der Funktionen

    @400[< History               >]     Neue FunktionalitÑten und VersionsÑnderungen












                                       @200[ ANHANG ]                      @001[ öbersicht ]
.205
    NET2000-Library : Allgemeines

    Mit den Funktionen der NET2000-Library kînnen Sie Daten von einer NET2000-
    Station lesen bzw. Daten an eine NET2000-Station schreiben, unabhÑngig
    davon, ob die Station ein Master oder ein Slave ist.

    Anmerkungen:
    - Bevor Sie die Funktionen der NET2000-Library in Ihrem Projekt verwenden
      kînnen, mÅssen Sie die Library in die entsprechende Projekt-Datenbank
      importieren.

    - Die Funktionen dieser Library kînnen nur verwendet werden, wenn das B&R-
      Modul NET2000.BR auf der Steuerung (Anwender-ROM) vorhanden ist!

    - Die Funktionen der NET2000-Library liefern im Fehlerfall als Ergebnis
      eine Fehlernummer.

    Bei der Installation der NET2000-Library sind einige Hinweise zu beachten
    (es wird zwischen NET2000-seriell und NET2000-CAN unterschieden).


                              @206[ Hinweise zur Installation ]            @001[ öbersicht ]
.206
    NET2000-Library : Allgemeines (Hinweise zur Installation)

    @320[NET2000-seriell]:
    - Die Funktionen der NET2000-Library kînnen nur verwendet werden, wenn das
      B&R-Modul NET2000.BR auf der Steuerung (Anwender-ROM) vorhanden ist!
    - Sollen in der Anwendung @310[ereignisgesteuerte Variablen] verwendet werden,
      mu· zusÑtzlich das Modul NT2EVENT.BR im Anwender-ROM der Steuerung vor-
      handen sein!
    - Die Module IF050 und IF060 (passive Schnittstellenmodule) kînnen nur be-
      dient werden, wenn die FRAME-BASIS-Treiber FBIF050.BR (fÅr IF050) und
      FBIF060.BR (fÅr IF060) auf der Steuerung (Anwender-ROM) vorhanden sind.

    @320[NET2000-CAN]:
    - Wenn Sie ein NET2000-CAN-Netzwerk betreiben wollen, mÅssen neben den
      unter "NET2000-seriell" angefÅhrten Modulen (siehe oben) die Module
      CAN2000.BR (CAN-Treiber) und NT2CAN.BR (NET2000-CAN-Anschlu·) im
      Anwender-ROM der Steuerung vorhanden sein.
    - Wenn die NET2000-CAN-Kommunikation nicht Åber die Standard-CAN-Schnitt-
      stelle, sondern Åber eine andere CAN-Schnittstelle erfolgen soll, mu·
      eine RPSSW-Version grî·er V1.91 verwendet werden.

                                       @200[ ANHANG ]                      @001[ öbersicht ]
.210
    NET2000-Library : NET2000-Protokoll

    NET2000 ist ein Kommunikationsprotokoll zur Vernetzung von Systemen der
    RPS-Familie 2000 (B&R SYSTEM 2010, B&R SYSTEM 2005, B&R SYSTEM 2003 und
    Panelware). FÅr NET2000 wird keine zusÑtzliche Hardware benîtigt, es
    genÅgen die Schnittstellen der jeweiligen Zentraleinheiten, Schnittstellen-
    module, Multiprozessoren, Parallelprozessoren bzw. intelligenten I/O-
    Prozessoren. Das Protokoll ist auf grî·tmîglichen Datendurchsatz ausge-
    richtet.

    KENNZEICHEN VON NET2000:

    * Master-Slaveprotokoll mit Querverkehr (NET2000-seriell), 
      Multimaster-Netzwerk (NET2000-CAN)
    * asynchrones frameorientiertes Protokoll mit Hammingdistanz 4
    * maximale FramelÑnge 512 Byte
    * effizienter Layer7 fÅr Datenaustausch
    * Eventbildung falls konfiguriert (nur NET2000-seriell)
    * RS485 bzw. RS232 (Punkt-zu-Punkt), CAN


                                       @200[ ANHANG ]                      @001[ öbersicht ]
.220
    NET2000-Library : Konfiguration

    Die Konfiguration des Masters bzw. Slaves erfolgt Åber eine Struktur mit
    dem Namen "NET2000". Der Strukturaufbau kann beliebig sein und mu· auch
    nur die Elemente, die benîtigt werden, enthalten.
    Die Konfiguration des NET2000-Netzwerks wird in drei Teile gegliedert:

    * NET2000-Konfigurationsvariablen
         - @230[Allgemeine Konfiguration     ]
         - @240[Device-Auswahl               ]
         - @245[Device-Parametrierung        ]
         - @250[CAN-spezifische Konfiguration]
         - @260[Eventmanager-Konfiguration   ]
    * @270[NET2000-Steuervariablen/NET2000-Statusvariable]
    * @280[Konfiguration mehrerer Netzwerke              ]

    Die Konfiguration wird vom NET2000-Manager Åbernommen, wenn das Element
    @230[NET2000.station] ungleich 0 ist.
    Im Normalfall mu· fÅr einen Slave nur die Stationsnummer gesetzt werden.
    FÅr den Master mu· zusÑtzlich die Variable @230[NET2000.master] auf den Wert 1
    gesetzt werden.
                                       @200[ ANHANG ]                      @001[ öbersicht ]
.230
    Konfigurationsvariablen - Allgemeine Konfiguration

    NET2000.station (Datentyp: BYTE):
    ---------------------------------    
    Stationsnummer im Netzwerk. Diese Nummer mu· eindeutig sein und zwischen 1
    und 255 liegen.
    Standardwert: 0 = ungÅltig
    Auswahl:      0 - 255

    NET2000.master (Datentyp: BYTE):
    --------------------------------
    Auswahl des Betriebsmodus (0, 1).
    Standardwert: 0
    Auswahl:      0 ... Slave (Server)
                  1 ... Master (Client)

    Im CAN-Netzwerk sollte auf jeder CAN-Station das Master-Flag gesetzt
    werden.



                                     @231[ Fortsetzung ]                   @001[ öbersicht ]
.231
    Konfigurationsvariablen - Allgemeine Konfiguration (Fortsetzung)

    NET2000.retry (Datentyp: BYTE):
    -------------------------------
    Anzahl der Sendewiederholungen, falls ein Telegramm verloren geht
    (Timeout).
    Standardwert: 3

    NET2000.ixtabsize (Datentyp: WORD):
    -----------------------------------
    Maximale Anzahl der Indizes bzw. der verwalteten Variablen (Objekte).
    Standardwert: 1024

    NET2000.t_response (Datentyp: WORD):
    ------------------------------------
    Timeout bei Request/Response (nur am Master bzw. Querverkehr-Master).
    Standardwert: 500 ms




                                     @232[ Fortsetzung ]                   @001[ öbersicht ]
.232
    Konfigurationsvariablen - Allgemeine Konfiguration (Fortsetzung)

    NET2000.t_cross (Datentyp: WORD):
    ---------------------------------
    Timeout bei Querverkehr (nur am seriellen Master).
    Standardwert: 600 ms

    NET2000.l7length (Datentyp: LONG):
    ----------------------------------
    Maximale LÑnge eines L7-Frames.
    Standardwert: 4 kByte

    NET2000.task_class (Datentyp: INT8):
    ------------------------------------
    Auswahl des Taskklassen-Kontexts, in dem die NET2000-Protokolldienste auf-
    gerufen werden.
    Standardwert: 4 (Taskklasse 4)
    Auswahl:      1 bis 4 (Taskklasse 1 bis 4)



                                       @220[ ZurÅck ]                      @001[ öbersicht ]
.240
    Konfigurationsvariablen - Device-Auswahl

    Bei der Device-Auswahl sind zwei verschiedene Varianten mîglich:

    - @241[AbwÑrtskompatible Variante]:
      FÅr Ñltere Versionen der NET2000-Library mu· die abwÑrtskompatible
      Variante der Device-Auswahl verwendet werden.

    - @242[Neue Variante] (analog zu Frame-Treiber V3.10):
      Die neue Variante der Device-Auswahl ist erst ab Version V2.10 der
      NET2000-Library mîglich.










                                       @220[ ZurÅck ]                      @001[ öbersicht ]
.241
    Device-Auswahl - abwÑrtskompatible Variante

    NET2000.interface (Datentyp: BYTE):
    -----------------------------------
    Auswahl der Schnittstelle.

    @320[NET2000-seriell]:
    Standardwert: 255 = RS485-Schnittstelle (wenn vorhanden)
    Auswahl:      siehe Abschnitt "@290[UnterstÅtzte Hardware]"
    @320[NET2000-CAN]:
    Standardwert: zur Zeit keine Eingabe notwendig
    Auswahl:      ---

    NET2000.medium (Datentyp: BYTE):
    --------------------------------
    Auswahl des physikalischen Mediums.
    Standardwert: 0 = NET2000-seriell
    Auswahl:      0 ... NET2000-seriell (RS232 oder RS485)
                  1 ... NET2000-CAN
                  2 ... reserviert fÅr Ethernet

                                       @240[ ZurÅck ]                      @001[ öbersicht ]
.242
    Device-Auswahl - neue Variante

    NET2000.device (Datentyp: LONG):
    --------------------------------
    Adresse eines Strings, welcher die verwendete Schnittstelle eindeutig be-
    schreibt. Format des Strings:

    [SL<x>].[SS<x>].[IF<x>] oder
    [CAN] ...... fÅr die Standard-CAN-Schnittstelle oder
    [DPR<x>] ... fÅr die Kommunikation Åber das DPR der LS251

    SL: Slot (Steckplatz) mit der Nummer <x>. Die mîglichen Steckplatznummern
        bewegen sich von 0 (CPU-Steckplatz) bis 15 (letzter Systembussteck-
        platz).
    SS: Steckt das Schnittstellenmodul, auf dem sich die Schnittstelle be-
        findet, in einem Einschubsteckplatz (auch "Subslot" genannt), so mu·
        hier die Nummer dieses Einschubsteckplatzes (<x> = 1, 2 oder 3) ange-
        geben werden.
    IF: Schnittstelle mit der Nummer <x>.


                                     @243[ Fortsetzung ]                   @001[ öbersicht ]
.243
    Device-Auswahl - neue Variante (Fortsetzung)

    Als Trennzeichen der Argumente ist ein Punkt (".") vorgeschrieben. Es kann
    aber auch jedes andere Åbliche Trennzeichen verwendet werden.
    Zwischen Gro·- und Kleinschreibung wird nicht unterschieden.

    Standardwert: NULL = Standard-RS485-Schnittstelle
                  D.h. wenn keine String-Adresse angegeben ist, wird die
                  Standard-CAN-Schnittstelle verwendet
    Auswahl:      siehe Abschnitt "@290[UnterstÅtzte Hardware]"

    Anmerkungen:
    - Wenn die Konfigurationsvariable NET2000.device definiert ist, fÅhrt die
      Definition von NET2000.interface bzw. NET2000.medium (abwÑrtskompatible
      Variante) zu einem Fehler.
    - Nur mit Hilfe dieses Strings (Device-Beschreibung) kînnen die Schnitt-
      stellen passiver IF-Module (IF050 und IF060) genutzt werden.
    - Ab Version V2.00 des Betriebssystems RPSSW kînnen auch andere CAN-
      Schnittstellen als die Standard-CAN-Schnittstelle verwendet werden
      (Beschreibung der Schnittstelle im allgemeinen Stringformat).

                                       @240[ ZurÅck ]                      @001[ öbersicht ]
.245
    Konfigurationsvariablen - Device-Parametrierung

    Bei der Device-Parametrierung sind zwei verschiedene Varianten mîglich:

    - @246[AbwÑrtskompatible Variante]:
      FÅr Ñltere Versionen der NET2000-Library mu· abwÑrtskompatible Variante
      der Device-Parametrierung verwendet werden.

    - @248[Neue Variante] (analog zu Frame-Treiber V3.10):
      Die neue Variante der Device-Parametrierung ist erst ab Version V2.20
      der NET2000-Library mîglich.










                                       @220[ ZurÅck ]                      @001[ öbersicht ]
.246
    Device-Parametrierung - abwÑrtskompatible Variante

    NET2000.baud (Datentyp: LONG):
    ------------------------------
    Baudrate der Verbindung.

    @320[NET2000-seriell]:
    Standardwert: 57600 Baud
    Auswahl:      2400, 4800, 9600, 19200, 38400, 57600, 115200 Baud
    @320[NET2000-CAN]:
    Standardwert: Standard-Baudrate des CAN-Treibers
    Auswahl:      10000, 20000, 50000, 100000, 125000, 250000, 500000,
                  1000000 Bit/s








                                     @247[ Fortsetzung ]                   @001[ öbersicht ]
.247
    Device-Parametrierung - abwÑrtskompatible Variante (Fortsetzung)

    NET2000.options (Datentyp: LONG):
    ---------------------------------
    Optionen
    Standardwert: 0 = keine Option
    Auswahl:      Bit 0 ...... Bit 0 = 1: INT1 Steuerung Åber RTS
                               (nur bei RS232)
                  Bit 1-31 ... reserviert

    NET2000.idle (Datentyp: WORD):
    ------------------------------
    ZeichenÅbertragungszeiten bis zum Schlie·en eines Empfangspuffers (nur fÅr
    serielle Schnittstellen, baudratenabhÑngig).
    Standardwert: 4 Zeichen
    Auswahl:      1 - 65635





                                       @245[ ZurÅck ]                      @001[ öbersicht ]
.248
    Device-Parametrierung - neue Variante

    NET2000.mode (Datentyp: LONG):
    ------------------------------
    Adresse eines Strings, welcher den Betriebsmodus der Schnittstelle be-
    schreibt.
    Format des Strings: [<Typ>],[<Baudrate>],[<Optionen>]

    Typ:       Die Schnittstelle kann als [RS232|RS422|RS485|TTY|RS422BUS] ge-
               îffnet werden, falls dies von der Hardware unterstÅtzt wird.
               Standardeinstellung: RS232
    Baudrate:  Die Schnittstelle kann mit folgenden Baudraten geîffnet werden:
               [300|600|1200|2400|4800|9600|19200|38400|57600|115200]
               Standardeinstellung: 57600
    Optionen:  Wurde als Schnittstellentyp eine RS232 ausgewÑhlt, sind folgende
               Optionen zulÑssig:
               [RT] ...... fÅr die Steuerung eines externen Kopplers (INT1) mit
                           der RTS-Leitung.
               [I=<x>] ... ZeichenÅbertragungszeiten bis zum Schlie·en eines
                           Empfangspuffers (<x> = 1 bis 65635).

                                     @249[ Fortsetzung ]                   @001[ öbersicht ]
.249
    Device-Parametrierung - neue Variante (Fortsetzung)

    Als Trennzeichen der Argumente ist ein Komma (",") vorgeschrieben. Es kann
    aber auch jedes andere Åbliche Trennzeichen verwendet werden.
    Zwischen Gro·- und Kleinschreibung wird nicht unterschieden, die Reihen-
    folge der Parameter hat keine Bedeutung.

    Anmerkung:
    NET2000.mode ersetzt die Variablen NET2000.baud, NET2000.options und
    NET2000.idle. Wenn NET2000.mode definiert ist, fÅhrt die Definition von
    NET2000.baud, NET2000.options oder NET2000.idle zu einem Fehler.










                                       @245[ ZurÅck ]                      @001[ öbersicht ]
.250
    Konfigurationsvariablen - CAN-spezifische Konfiguration

    NET2000.CAN.nnodes (Datentyp: BYTE):
    ------------------------------------
    Anzahl der Stationen in einem NET2000-CAN-Netzwerk.
    Standardwert: 2
    Auswahl:      2 bis 255

    Bei grî·erer Stationsanzahl steigt der Speicherbedarf und die Leistung des
    Netzwerks sinkt.

    NET2000.CAN.basis (Datentyp: WORD):
    -----------------------------------
    Basis zur Berechnung der CAN-IDs.
    Standardwert: 1000
    Auswahl:      siehe CAN-Dokumentation





                                       @220[ ZurÅck ]                      @001[ öbersicht ]
.260
    Konfigurationsvariablen - Eventmanager-Konfiguration

    NET2000.EVT.nvars (Datentyp: WORD):
    -----------------------------------
    Maximale Anzahl verwalteter Eventvariablen.
    Standardwert: 200
    Auswahl:      1 bis 65535














                                       @220[ ZurÅck ]                      @001[ öbersicht ]
.270
    NET2000-Steuervariablen / NET2000-Statusvariable

    NET2000-Steuervariablen werden im Gegensatz zu den Konfigurationsvariablen
    zyklisch ausgewertet.

    NET2000.reset (Datentyp: BYTE):
    -------------------------------
    Wird diese Variable ungleich 0, so resetiert sich der NET2000-Manager.
    Die Variable wird beim Reset automatisch wieder auf 0 gesetzt. Durch
    einen Reset wird der NET2000-Manager neu konfiguriert.

    NET2000.freeze (Datentyp: BYTE):
    --------------------------------
    Wird diese Variable ungleich 0, so wird der NET2000-Manager gestoppt, bis
    diese Variable wieder 0 wird.






                                     @271[ Fortsetzung ]                   @001[ öbersicht ]
.271
    NET2000-Steuervariablen / NET2000-Statusvariable (Fortsetzung)

    NET2000.close (Datentyp: BYTE):
    -------------------------------
    Wird diese Variable ungleich 0, so wird der FBASE-Treiber fÅr die ALI-
    Kommunikation (INA2000) zurÅckkonfiguriert. Wird die Variable wieder 0,
    so wird der FBASE-Treiber wieder fÅr NET2000 geîffnet. Voraussetzung fÅr
    diese FunktionalitÑt ist die Verwendung einer RPSSW-Version grî·er oder
    gleich V1.91.

    NET2000.status (Datentyp: WORD):
    --------------------------------
    In dieser Variable werden fatale Fehler des NET2000-Managers protokolliert.
    Tritt ein fataler Fehler auf, wird das NET2000-Netzwerk gestoppt bzw. gar
    nicht gestartet.






                                       @220[ ZurÅck ]                      @001[ öbersicht ]
.280
    Konfiguration mehrerer Netzwerke

    Um mehrere Netzwerke konfigurieren zu kînnen, benîtigt jedes Netzwerk
    eigene Konfigurationsvariablen. öber die Struktur NET2000 kann jedoch
    nur ein Netzwerk betreut werden. Die logische Art der Erweiterung fÅr
    mehrere Netzwerke ist die Bildung eines Feldes (Array) von NET2000-
    Konfigurations-Strukturen. So kînnen maximal 4 Netzwerke betreut werden:

    NET2000.*    ... Konfiguration eines Netzwerks (wie gehabt)
    NET2000[0].* ... Konfiguration des 1. Netzwerks
    NET2000[1].* ... Konfiguration des 2. Netzwerks
    NET2000[2].* ... Konfiguration des 3. Netzwerks
    NET2000[3].* ... Konfiguration des 4. Netzwerks

    Die NET2000-Netzwerke kînnen vîllig autark gesteuert werden. Zu beachten
    ist lediglich, da· fÅr die einzelnen Netzwerke unterschiedliche Schnitt-
    stellen verwendet werden mÅssen.




                                     @281[ Fortsetzung ]                   @001[ öbersicht ]
.281
    Konfiguration mehrerer Netzwerke (Fortsetzung)

    Beauftragung / Performance mehrerer Netzwerke:

    - Mehrere Netzwerke im Kontext der gleichen Taskklasse:
      Nach jeder zyklischen Aktivierung einer "NET2000-Linie" (siehe dazu auch
      "@326[NET2000-CAN]") erfolgt die Umschaltung auf das nÑchste aktive Netzwerk.
      Ein Netzwerk ist aktiv, wenn die NET2000-Konfigurationsvariable
      NET2000.station ungleich 0 ist.
      Ein konfiguriertes aber nicht verwendetes Netzwerk verbraucht (wenn das
      Netzwerk aktiv ist) unnîtig Speicher und Leistung.
      Dazu ein Beispiel: Betrieb zweier Netzwerke im 10-ms-Takt (Taskklasse 1).
      Die Pollrate der NET2000-Linien verdoppeln sich. Die reale Pollrate einer
      "NET2000-Linie" betrÑgt bei 2 Netzwerken nun nicht mehr 10 ms, sondern
      20 ms.

    - Mehrere Netzwerke im Kontext unterschiedlicher Taskklassen:
      Die Netzwerke beeinflussen sich in der Leistung nicht. Die Pollraten der
      "NET2000-Linien" bleiben unverÑndert.


                                       @220[ ZurÅck ]                      @001[ öbersicht ]
.290
    NET2000-Library : UnterstÅtzte Hardware

    UnterstÅtzte Hardware:

    Bis einschlie·lich @291[Version 2.00] der NET2000-Software erfolgt die Device-
    Konfiguration Åber die Elemente NET2000.medium und NET2000.interface
    (abwÑrtskompatible Variante der Device-Auswahl).
    Ab @293[Version 2.10] der NET2000-Software erfolgt die Device-Auswahl
    Åber das Elemente NET2000.device (neue Variante der Device-Auswahl).












                                       @200[ ANHANG ]                      @001[ öbersicht ]
.291
    NET2000-Library : UnterstÅtzte Hardware (Fortsetzung)

    Device-Auswahl Åber NET2000.medium und NET2000.interface:
    NET2000 (Version 2.00) unterstÅtzt alle B&R 2000 Zentraleinheiten, Schnitt-
    stellenmodule, Multiprozessoren, Parallelprozessoren und intelligente I/O-
    Prozessoren.

    CAN-Schnittstellen / NET2000.medium = 1 (NET2000-CAN):
    …ÕÕÕÕÀÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕª
    ∫ IF ∫ IF10x, XP152, CP104, IF152, IP151, CP47x, CP77x, CP200, CP260   ∫
    ÃÕÕÕÕŒÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ
    ∫  x ∫ CAN                                                             ∫
    »ÕÕÕÕ ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº
    ErklÑrung zur Tabelle: IF ... Nummer der Schnittstelle







                                     @292[ Fortsetzung ]                   @001[ öbersicht ]
.292
    NET2000-Library : UnterstÅtzte Hardware (Fortsetzung)

    Serielle Schnittstellen / NET2000.medium = 0 (NET2000-seriell):
    …ÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕª
    ∫ IF ∫ CP100 ≥ MP100 ≥ CP15x ≥ C200  ≥ XP152 ≥ CP47x  ≥ CP260  ≥ CP104 ∫
    ∫    ∫ CP200 ≥       ≥       ≥ C220  ≥ IP151 ≥ CP77x  ≥        ≥       ∫
    ∫    ∫ IF10x ≥       ≥       ≥ C300  ≥ IF152 ≥        ≥        ≥       ∫
    ÃÕÕÕÕŒÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕπ
    ∫  0 ∫ RS232 ≥ RS232 ≥ RS232 ≥ RS232 ≥ RS232 ≥ RS232  ≥ RS232  ≥ RS232 ∫
    ∫  1 ∫ RS232 ≥ ----- ≥ RS485 ≥ RS232 ≥ ----- ≥ SSlot1 ≥ SSlot1 ≥ RS232 ∫
    ∫  2 ∫ RS485 ≥ RS485 ≥ ----- ≥ RS485 ≥ ----- ≥ SSlot2 ≥ SSlot1 ≥ ----- ∫
    ∫  3 ∫ ----- ≥ ----- ≥ ----- ≥ ----- ≥ ----- ≥ ------ ≥ SSlot1 ≥ ----- ∫
    ∫  4 ∫ ----- ≥ ----- ≥ ----- ≥ ----- ≥ ----- ≥ ------ ≥ SSlot2 ≥ ----- ∫
    ∫  5 ∫ ----- ≥ ----- ≥ ----- ≥ ----- ≥ ----- ≥ ------ ≥ SSlot2 ≥ ----- ∫
    ∫  6 ∫ ----- ≥ ----- ≥ ----- ≥ ----- ≥ ----- ≥ ------ ≥ SSlot2 ≥ ----- ∫
    »ÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕœÕÕÕÕÕÕÕœÕÕÕÕÕÕÕœÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕº
    ErklÑrung zur Tabelle: IF ... Nummer der Schnittstelle




                                       @290[ ZurÅck ]                      @001[ öbersicht ]
.293
    NET2000-Library : UnterstÅtzte Hardware (Fortsetzung)

    Device-Auswahl Åber NET2000.device:
    Die Version 2.10 der NET2000-Software bietet Ihnen die Mîglichkeit,
    Schnittstellen textuell zu beschreiben.
    Format des Strings:

    [SL<x>].[SS<x>].[IF<x>] bzw. [CAN] fÅr die Standard-CAN-Schnittstelle

    SL: Slot (Steckplatz) mit der Nummer <x>. Die mîglichen Steckplatznummern
        bewegen sich von 0 (CPU-Steckplatz) bis 15 (letzter Systembussteck-
        platz).
    SS: Steckt das Schnittstellenmodul, auf dem sich die Schnittstelle be-
        findet, in einem Einschubsteckplatz (auch "Subslot" genannt), so mu·
        hier die Nummer dieses Einschubsteckplatzes (<x> = 1, 2 oder 3) ange-
        geben werden. So mu· z.B. bei Verwendung eines steckbaren Schnitt-
        stellenmoduls (IF613, IF621, usw.) in einer IF060 fÅr den Einschub-
        steckplatz immer SS1 angegeben werden, da die IF060 nur Åber einen
        Einschubsteckplatz verfÅgt.
    IF: Schnittstelle mit der Nummer <x>.

                                     @294[ Fortsetzung ]                   @001[ öbersicht ]
.294
    NET2000-Library : UnterstÅtzte Hardware (Fortsetzung)

    Als Trennzeichen der Argumente ist ein Punkt (".") vorgeschrieben.

    Beispiele gÅltiger Device-Beschreibungen:
    "IF2"
    "SL5.IF3"
    "SS1.IF1"
    "SL4.SS1.IF3"

    Ab Version 2.10 kînnen alle Schnittstellen, auch Schnittstellen passiver
    IF-Module und alle CAN-Schnittstellen fÅr das NET2000-Netzwerk verwendet
    werden.

    ACHTUNG:
    - Voraussetzung fÅr die Verwendung passiver IF-Module ist eine RPSSW-
      Version grî·er oder gleich V1.91 und der entsprechende FRAME-BASIS-
      Treiber fÅr das Modul (FBIF050.BR fÅr IF050 und FBIF060.BR fÅr IF060).
    - Ab Version V2.00 des Betriebssystems RPSSW kînnen auch andere CAN-
      Schnittstellen als die Standard-CAN-Schnittstelle verwendet werden.

                                       @290[ ZurÅck ]                      @001[ öbersicht ]
.300
    NET2000-Library : Proze·variablen

    Generell sind alle syntaktischen Konstrukte, die auch in der Programmierung
    der B&R2000-RPS erlaubt sind, gÅltig. Die LÑnge eines Namens ist fÅr
    NET2000 nicht beschrÑnkt.

    Beispiele gÅltiger Syntax von PV-Namen:

    pvname                     Name einer PV
                               (normale, globale, skalare PVs)
    rpstask:pvname             Name einer PV in einer bestimmten RPS-Task
                               (normale, lokale, skalare PVs)
    d_pvname                   dynamische PVs (Zeiger)
    *d_pvname                  dynamische PVs (Zeigerinhalt)
    feld                       Felder (Arrays)
    feld[5]                    Feldelemente
    struct                     Strukturen
    struct.elem1               Strukturelemente
    struct2[2].struct.elem2    komplexe Referenzen


                                     @301[ Fortsetzung ]                   @001[ öbersicht ]
.301
    NET2000-Library : Proze·variablen (Fortsetzung)

    SYNTAX wie im PG2000:
    Es kînnen skalare Proze·variablen, Felder und Strukturen als Ganzes bzw.
    einzelne Elemente von Feldern und Strukturen (keine EinschrÑnkungen bei
    der Schachteltiefe, Beispiel: a[3].b.c.[2].e) referenziert werden.

    ERWEITERTE SYNTAX:
    * Wenn man gezielt die Variablen einer RPS-Task (z.B. lokale Variablen)
      referenzieren will, dann wird dem PV-Namen der entsprechende Taskname
      vorangestellt. Als Trennzeichen wird ein Doppelpunkt (":") verwendet
      (Beispiel: rpstask:pvname).
    * Werden dynamische PVs mit fÅhrendem "*" referenziert, ist der Inhalt
      des Zeigers gemeint.
    * Werden dynamische PVs OHNE fÅhrenden "*" referenziert, ist der Zeiger
      selbst gemeint.
      ACHTUNG: Schreibzugriffe auf dynamische Variablen (Zeiger) kînnen fatale
               Folgefehler (Systemabsturz) verursachen.



                                       @200[ ANHANG ]                      @001[ öbersicht ]
.310
    NET2000-Library : Eventgenerierung / Eventvariablen

    FunktionalitÑt des ereignisgesteuerten Datenaustauschs:

    * Werden Variablen als Eventvariablen angemeldet, so wird das angemeldete
      Objekt automatisch vom NET2000-Slave auf énderung Åberwacht und nur im
      Falle einer énderung bei einer Response an den Master ("Eventmaster")
      in einer Eventliste mitgeteilt.

    * Als "Eventmaster" wird jener Master (Master oder Slave, der im Quer-
      verkehr zum Master wird) definiert, der als erster Eventvariablen beim
      Slave anmeldet.

    * Nur skalare Datentypen kînnen als Eventvariablen angemeldet werden.







    @311[ Voraussetzungen ]             @312[ Erweiterte Syntax ]                @001[ öbersicht ]
.311
    NET2000-Library : Eventgenerierung - Voraussetzungen

    Voraussetzungen:

    * Auf dem NET2000-Slave mu· das Modul "nt2event.br" installiert sein.

    * Der "Eventmaster" mu· den "Event"-generierenden Slave zyklisch pollen,
      da der Slave eine Eventliste nur an einen Responseframe (nur Read/Write-
      Response) an den Master anhÑngen kann.

    * Zur Zeit wird die Eventauswertung am RPS-NET2000-Master mit den existie-
      renden Funktionsblîcken nicht unterstÅtzt. Die Auswertung von Eventlisten
      unterstÅtzen zur Zeit nur SPOIO- und INTERACT-VisualisierungsgerÑte.








                                  @312[ Erweiterte Syntax ]                @001[ öbersicht ]
.312
    NET2000-Library : Eventgenerierung - Erweiterte Syntax

    Bei Eventvariablen wird die Syntax des PV-Namens erweitert. Der Name einer
    Eventvariable beginnt mit einem Rufzeichen "!". Durch das AnhÑngen eines
    entsprechenden Parameters an den PV-Namen kann die Hysterese der Event-
    variable (Parameter "/h") und/oder das öberwachungsintervall der Event-
    variable (Parameter "/c") definiert werden.

    Beispiele: !schalter/c=200
               !istwert/c=500/h=10
               !endwert










                                     @313[ Fortsetzung ]                   @001[ öbersicht ]
.313
    NET2000-Library : Eventgenerierung - Erweiterte Syntax (Fortsetzung)

    SyntaxerklÑrung:

    * Die Angabe der Parameter (c, h) ist optional.

    * Wertbereich fÅr Hysterese(h):   0-4294967295
      Wertbereich fÅr Zyklus(c):      0-65535

    * Bei Eventvariablen ohne Hysterese-Angabe bzw. Eventvariablen mit
      Hysterese 0 (/h=0) wird jede énderung des ereignisgesteuerten Objekts
      Åbertragen.
      Allgemein gilt: Ist die WertÑnderung des Objekts grî·er als die an-
      gegebene Hysterese, wird der Wert Åbertragen.

    * Mit dem Anmelden (GetOV) einer Variable der Syntax "!name/c=0" kann
      eine einzelne Eventbildung wieder gesperrt werden.

    * Durch Beschreiben des Objekts "EVENTS" (Index 4 auf Kanal 255) mit dem
      Wert 2 kann die gesamte Eventliste gelîscht werden.

                                       @200[ ANHANG ]                      @001[ öbersicht ]
.320
    NET2000-Library : Transportmedien

    Ab Version V2.00 der NET2000-Software ist die CAN-Implementierung soweit
    abgeschlossen, da· die Multimaster-FÑhigkeit von NET2000-CAN gegeben und
    die Basis zur Berechnung der CAN-IDs (CAN-Identifier) einstellbar ist.
    D.h. ab Version V2.00 der NET2000-Software kann die NET2000-Kommunikation
    nicht nur Åber die seriellen Schnittstellen (NET2000-seriell) sondern auch
    Åber den CAN-Bus (NET2000-CAN) erfolgen.
    Dazu sind einige Punkte zu beachten:

    - @321[Neue Konfigurationsvariablen]
    - @323[CAN-COB-Definition]
    - @326[Beauftragung / Performance der NET2000-CAN-Linien]
    - @327[Speicherbedarf eines NET2000-CAN-Knotens]







                                       @200[ ANHANG ]                      @001[ öbersicht ]
.321
    Transportmedien - Neue Konfigurationsvariablen

    FÅr die NET2000-Kommunikation Åber den CAN-Bus wurden neue Konfigurations-
    variablen eingefÅhrt und bestehende Konfigurationsvariablen erweitert:

    NET2000.medium (Datentyp: BYTE):
    --------------------------------
    Auswahl des physikalischen Mediums.
    Standardwert: 0 = NET2000-seriell
    Auswahl:      0 ... NET2000-seriell (RS232 oder RS485)
                  1 ... NET2000-CAN
                  2 ... reserviert fÅr Ethernet

    Gleichzeitig zu NET2000.medium wird auch die bestehende Konfigurations-
    variable NET2000.interface ausgewertet.






                                     @322[ Fortsetzung ]                   @001[ öbersicht ]
.322
    Transportmedien - Neue Konfigurationsvariablen (Fortsetzung)

    NET2000.CAN.nnodes (Datentyp: BYTE):
    ------------------------------------
    Anzahl der Stationen in einem NET2000-CAN-Netzwerk.
    Standardwert: 2
    Auswahl:      2 bis 255

    NET2000.CAN.basis (Datentyp: WORD):
    -----------------------------------
    Basis zur Berechnung der CAN-IDs.
    Standardwert: 1000
    Auswahl:      siehe CAN-Dokumentation








                                       @320[ ZurÅck ]                      @001[ öbersicht ]
.323
    Transportmedien - CAN-COB-Definition

    Im NET2000-CAN-Netzwerk kînnen automatisch alle Netzwerkteilnehmer CLIENT
    sein.
    Auf einem NET2000-CAN-Knoten wird die mit der Konfigurationsvariable
    NET2000.CAN.nnode festgelegte Anzahl von COBs (COB = Kommunikationsobjekt)
    definiert. Dies mu· bei der Berechnung des Speicherbedarfs fÅr den Knoten
    berÅcksichtigt werden.
    Die Anzahl der im NET2000-CAN-Netzwerk vergebenen Knotennummern mu· kleiner
    oder gleich der unter NET2000.CAN.nnodes angegebenen Anzahl sein. Wollte
    man frei wÑhlbare Knotennummern (1-255) vergeben, so mÅ·te jedem NET2000-
    CAN-Knoten eine Liste mit den Knotennummern der anderen Netzwerkteilnehmer
    Åbergeben werden. Dies wÑre Aufgabe des Anwenders und ist fehleranfÑllig.

    Anmerkung:
    Wird im Netzwerk eine grî·ere Knotenanzahl definiert, als tatsÑchlich
    Knoten im Netz vorhanden sind, so wird auf jedem Knoten unnîtig Speicher
    verbraucht und die Leistung des Netzwerks verschlechtert sich. Die
    FunktionsfÑhigkeit des Netzwerks wird dadurch aber nicht beeintrÑchtigt.


                                     @324[ Fortsetzung ]                   @001[ öbersicht ]
.324
    Transportmedien - CAN-COB-Definition (Fortsetzung)

    Algorithmus zur Berechnung der CAN-IDs:

    CAN_ID = (CAN_BASIS + (NODE_of_CalcID - 1)*nStation + NODE_of_partner - 1)

    ErklÑrung der Formel:
    CAN_BASIS ......... Basis zur Berechnung der CAN-IDs (siehe Konfigurations-
                        variable NET2000.CAN.basis)
    NODE_of_CalcID .... Knotennummer der eigenen Station
    NODE_of_partner ... Knotennummer des potentiellen Clients
    nStation .......... Anzahl der Stationen im NET2000-CAN-Netzwerk

    Die CAN-ID fÅr die Server-COBs wird aus der CAN-Basis (Basis zur Berechnung
    der CAN-IDs, siehe Konfigurationsvariable NET2000.CAN.basis), der eigenen
    Knotennummer und der Knotennummer eines potentiellen Clients berechnet.
    FÅr die Berechnung der CAN-IDs des Client-COBs wird in die Formel zweimal
    die eigene Stationsnummer eingesetzt.



                                     @325[ Fortsetzung ]                   @001[ öbersicht ]
.325
    Transportmedien - CAN-COB-Definition (Fortsetzung)

    Beispiel:
    Anzahl der Stationen im CAN-NET2000-Netzwerk = 3
    Basis zur Berechnung der CAN-IDs = 1000
    Berechnung der CAN-ID auf Node1 (Stationsnummer = 1) fÅr die Kommunikation
    mit Node2 (Stationsnummer = 2):

    CAN_ID = 1000 + (1-1)*3 + 2-1 = 1001

    Auf JEDEM KNOTEN werden so viele CAN-IDs vergeben, wie Knoten im Netzwerk
    vorhanden sind. D.h. im CAN-NETZWERK werden (Knotenanzahl * Knotenanzahl)
    CAN-IDs vergeben.

    In unserem Beispiel werden den Knoten folgende CAN-IDs zugewiesen:
    Stationsnummer 1 ... CAN-IDs 1000-1002
    Stationsnummer 2 ... CAN-IDs 1003-1005
    Stationsnummer 3 ... CAN-IDs 1006-1008

    Insgesamt werden 3*3 = 9 CAN-IDs vergeben!

                                       @320[ ZurÅck ]                      @001[ öbersicht ]
.326
    Transportmedien - Beauftragung / Performance der NET2000-CAN-Linien

    Die NET2000-Linien werden sequentiell beauftragt. D.h. in jedem NET2000-
    Zyklus wird eine Linie abgearbeitet. Zu beachten ist, da· sich die
    Reaktionszeit mit zunehmender Knotenanzahl und entsprechender Linien-
    auslastung linear verschlechtert.

    Reaktionszeit (worst case) = (Stationsanzahl + 1) * Zykluszeit * 2

    Beispiel:
    In einem NET2000-CAN-Netzwerk mit 16 Stationen, das im 10-ms-Takt betrieben
    wird, kann die Reaktionszeit im schlechtesten Fall 340 ms betragen.

    Dies ist in den eingestellten Timeout-Zeiten zu berÅcksichtigen.
    Sicherheitsreserven (siehe auch @345[OV-Server]) sind einzubauen!

    Response-Timeout = Reaktionszeit * 3

    Die in unserem Beispiel einzustellende Timeout-Zeit wÅrde somit
    340 ms * 3 (ca. 1000 ms) betragen.

                                       @320[ ZurÅck ]                      @001[ öbersicht ]
.327
    Transportmedien - Speicherbedarf eines NET2000-CAN-Knotens

    L2-Puffer:
    ----------
    FÅr jede Linie werden 2 Puffer benîtigt.

    Beispiel fÅr den Speicherbedarf der L2-Puffer:
    Speicherbedarf fÅr die L2-Puffer auf einem Knoten in einem NET2000-CAN-
    Netzwerk mit 16 Knoten. L2-Puffergrî·e = 518 Byte.
 
    2 * 16 * 518 Byte = 16,2 kByte

    L7-Puffer:
    ----------
    Jede Linie benîtigt einen Puffer.

    Beispiel:
    Speicherbedarf fÅr die L7-Puffer auf einem Knoten in einem NET2000-CAN-
    Netzwerk mit 16 Knoten. NET2000.l7length = 4 kByte.

    16 * 4 kByte = 64 kByte
                                     @328[ Fortsetzung ]                   @001[ öbersicht ]
.328
    Transportmedien - Speicherbedarf eines NET2000-CAN-Knotens (Fortsetzung)

    Speicher fÅr die Verwaltung:
    ----------------------------
    FÅr die Verwaltung werden pro Linie ca. 0,5 kByte benîtigt. FÅr die
    Verwaltung des Netzwerks und fÅr den privaten Stack werden ca. 3 kByte
    benîtigt.
    ZusÑtzlich wird auf dem Knoten noch Speicher fÅr die PV-Indexliste be-
    nîtigt. Der Speicherbedarf ist von der Grî·e der PV-Indexliste, welche
    mit NET2000.ixtabsize konfiguriert wird, abhÑngig.

    Beispiel:
    Speicherbedarf fÅr die Verwaltung auf einem Knoten in einem NET2000-CAN-
    Netzwerk mit 16 Knoten. NET2000.ixtabsize = 1024.

    0,5 kByte * (NET2000.CAN.nnodes) + NET2000.ixtabsize * 10 Byte = 18 kByte





                                     @329[ Fortsetzung ]                   @001[ öbersicht ]
.329
    Transportmedien - Speicherbedarf eines NET2000-CAN-Knotens (Fortsetzung)

    Gesamtbedarf an Speicher:
    -------------------------
    In unseren Beispielen betrÑgt der Gesamtbedarf an Speicher auf einem Knoten
    101,2 kByte!

    VORSICHT bei der Konfiguration!
    Werden z.B. keine L7-Puffer Åbertragen, die grî·er als die maximale L2-
    FramelÑnge (518 Byte) sind (NET2000.l7length = 518), so reduziert sich der
    Speicherbedarf schlagartig um 64 kByte auf insgesamt 36,2 kByte. Wird die
    PV-Indextabelle auf beispielsweise 128 EintrÑge (NET2000.ixtabsize = 128)
    verkleinert, reduziert sich der Speicherverbrauch abermals um 10,5 kByte
    auf insgesamt 24,7 kByte!

    Der CAN-Treiber selbst benîtigt zur Zeit ca. 10 kByte + 56 * COB-Anzahl
    (= Anzahl der Knoten im Netz) Bytes!




                                       @320[ ZurÅck ]                      @001[ öbersicht ]
.340
    NET2000-Library : Taskklassen-Kontext

    Die zyklischen NET2000-Dienste werden (ab NET2000-Version V2.00) im Kontext
    einer Taskklasse ausgefÅhrt. Der Taskklassen-Kontext ist Åber die NET2000-
    Konfigurationsvariable NET2000.task_class konfigurierbar.

    Vorteile:
    - Das "Jittern" der Taskklassen wird verhindert.
    - Das Lesen und Beschreiben von Proze·variablen erfolgt nun synchron
      zur parametrierten Taskklasse. Damit werden Datenkonsistenzprobleme
      beseitigt.
    - CLIENT-Dienste (AuftrÑge vom FUB, usw.) werden am Ende der Taskklasse,
      SERVER-Dienste (Auftrag eines CLIENT-Knotens) werden am Beginn der Task-
      klasse behandelt.

    Nachteil:
    Die NET2000-Dienste gehen voll zur Last der Taskklasse. FÅr zeitaufwendige
    NET2000-Dienste mu·te daher ein (in der Restzeit laufender) Server einge-
    richtet werden. Der GetOV-Dienst (Objektverzeichnis holen) und der Dienst
    ROS (Objektstruktur lesen) werden vom "OV-Server" erbracht.

                                       @200[ ANHANG ]                      @001[ öbersicht ]
.345
    NET2000-Library : OV-Server

    Der OV-Server hat die Aufgabe, zeitaufwendige Dienste au·erhalb des
    Taskklassen-Kontexts zu behandeln. Die Dienste GetOV (Objektverzeichnis
    holen) und ROS (Objektstruktur lesen) werden vom OV-Server erbracht.

    Zu beachten ist, da· die Diensterbringung des OV-Servers frÅhestens einen
    Taskklassen-Zyklus spÑter erfolgen kann. Dies ist in den eingestellten
    Response-Timeouts zu berÅcksichtigen.

    Der OV-Server ist als Teil der NET2000-Systemtask realisiert. Die NET2000-
    Systemtask lÑuft in der Restzeit mit der PrioritÑt 0x90.









                                       @200[ ANHANG ]                      @001[ öbersicht ]
.350
    NET2000-Library : Syntaxbeschreibung

    Datentypen:
    FÅr viele Funktionen sind bestimmte Gruppen von Datentypen zulÑssig. Um
    bei der Funktionsbeschreibung nicht alle zulÑssigen Datentypen anfÅhren
    zu mÅssen, werden folgende Gruppenbezeichnungen eingefÅhrt:
    …ÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕª
    ∫ Gruppe ∫  BIT  ≥ INT8  ≥ BYTE  ≥ INT16 ≥ WORD  ≥ INT32 ≥ LONG  ≥ FLOAT ∫
    ÃÕÕÕÕÕÕÕÕŒÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕπ
    ∫ BASIS  ∫       ≥   x   ≥   x   ≥   x   ≥   x   ≥   x   ≥   x   ≥       ∫
    «ƒƒƒƒƒƒƒƒ◊ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ∂
    ∫ NICHT  ∫   x   ≥   x   ≥   x   ≥   x   ≥   x   ≥   x   ≥   x   ≥       ∫
    ∫ FLOAT  ∫       ≥       ≥       ≥       ≥       ≥       ≥       ≥       ∫
    «ƒƒƒƒƒƒƒƒ◊ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ∂
    ∫ ALLE   ∫   x   ≥   x   ≥   x   ≥   x   ≥   x   ≥   x   ≥   x   ≥   x   ∫
    «ƒƒƒƒƒƒƒƒ◊ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ∂
    ∫ FELD   ∫  [x]  ≥  [x]  ≥  [x]  ≥  [x]  ≥  [x]  ≥  [x]  ≥  [x]  ≥  [x]  ∫
    »ÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕœÕÕÕÕÕÕÕœÕÕÕÕÕÕÕœÕÕÕÕÕÕÕœÕÕÕÕÕÕÕœÕÕÕÕÕÕÕœÕÕÕÕÕÕÕº
      x  Datentyp ist zulÑssig
     [x] Datentyp ist zulÑssig als Feldvariable oder Zeichenkette (String)

                                     @351[ Fortsetzung ]                   @001[ öbersicht ]
.351
    NET2000-Library : Syntaxbeschreibung (Fortsetzung)

    Pfeile:
    FÅr die Darstellung von Eingangs- und Ausgangsparametern werden Pfeile
    verwendet. Dabei gilt folgende Vereinbarung:
    …ÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕª
    ∫  Pfeil  ∫  Bedeutung                                                   ∫
    ÃÕÕÕÕÕÕÕÕÕŒÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ
    ∫   ->    ∫  Eingangsparameter                                           ∫
    «ƒƒƒƒƒƒƒƒƒ◊ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ∂
    ∫   <->   ∫  Ein-/Ausgangsparameter. Funktionell ist es ein Ausgangs-    ∫
    ∫         ∫  parameter. öblicherweise wird er aber vor dem Aufruf der    ∫
    ∫         ∫  Funktion mit einer bestimmten Information geladen (z.B.     ∫
    ∫         ∫  einer Adresse). Meist wird die Adresse einer Variable mit   ∫
    ∫         ∫  adr() [PL2000] oder einem Adre·kontakt [KOP] angeschlossen. ∫
    «ƒƒƒƒƒƒƒƒƒ◊ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ∂
    ∫   <-    ∫  Ausgangsparameter                                           ∫
    »ÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº



                                     @352[ Fortsetzung ]                   @001[ öbersicht ]
.352
    NET2000-Library : Syntaxbeschreibung (Fortsetzung)

    Funktionsblîcke:
    Funktionsblîcke sind in dieser Online-Hilfe nicht grafisch dargestellt.
    Sie finden aber alle fÅr Funktionsblîcke relevanten Informationen, wie
    Eingangsparameter (->), Ein-/Ausgangsparameter (<->) und Ausgangsparameter
    (<-) in der Online-Hilfe.














                                       @200[ ANHANG ]                      @001[ öbersicht ]
.400
    NET2000-Library : History - VersionsÑnderungen

  …ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕª
  ∫ V2.10 -> V2.20  ≥ AKTUELLE VERSION: Neue FunktionalitÑten/Fehlerbehebung  ∫
  «ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ∂
  ∫ Folgende NET2000-Konfigurationsvariablen werden neu eingefÅhrt:           ∫
  ∫ NET2000.mode .... Angabe des Betriebsmodus der Schnittstelle              ∫
  ∫                   (analog zu Frame-Treiber V3.10).                        ∫
  ∫ NET2000.close ... Wird diese Variable ungleich 0, so wird der FBASE-      ∫
  ∫                   Treiber fÅr die ALI-Kommunikation (INA2000) zurÅck-     ∫
  ∫                   konfiguriert. Wird die Variable wieder 0, so wird der   ∫
  ∫                   FBASE-Treiber wieder fÅr NET2000 geîffnet.              ∫
  »ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº








                                     @401[ Fortsetzung ]                   @001[ öbersicht ]
.401
    NET2000-Library : History - VersionsÑnderungen (Fortsetzung)

  …ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕª
  ∫ V2.00 -> V2.10  ≥ éLTERE VERSIONEN: Neue FunktionalitÑten                 ∫
  «ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ∂
  ∫ - Erweiterung des NET2000-Managers in RÅcksichtnahme auf die neue         ∫
  ∫   Hardware- und Software-Struktur der RPS-Familien.                       ∫
  ∫ - UnterstÅtzung passiver IF-Module (IF050, IF060).                        ∫
  ∫ - UnterstÅtzung mehrerer CAN-Schnittstellen.                              ∫
  ∫ - Folgende NET2000-Konfigurationsvariablen werden neu eingefÅhrt:         ∫
  ∫   NET2000.device ... Angabe eines Device-Beschreibungsstrings             ∫
  ∫                      (analog zu Frame-Treiber V3.10).                     ∫
  ∫   NET2000.idle ..... Definition der ZeichenÅbertragungszeiten bis zum     ∫
  ∫                      Schlie·en eines Empfangspuffers.                     ∫
  »ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº






                                     @402[ Fortsetzung ]                   @001[ öbersicht ]
.402
    NET2000-Library : History - VersionsÑnderungen (Fortsetzung)

  …ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕª
  ∫ V1.24 -> V2.00  ≥ éLTERE VERSIONEN: Neue FunktionalitÑten                 ∫
  «ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ∂
  ∫ - UnterstÅtzung mehrerer Schnittstellen, Realisierung unabhÑngiger Netz-  ∫
  ∫   werke auf einer RPS.                                                    ∫
  ∫ - CAN-Implementierung: Ab dieser Version der NET2000-Software werden CAN- ∫
  ∫   Schnittstellen unterstÅtzt.                                             ∫
  ∫ - Parametrierbare Zykluszeit des NET2000-Managers. Die NET2000-Dienste    ∫
  ∫   sollen im Taskklassen-Kontext ausgefÅhrt werden, dies ermîglicht eine   ∫
  ∫   optimale Anpassung an die Applikation.                                  ∫
  ÃÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ
  ∫ V1.23 -> V1.24  ≥ éLTERE VERSIONEN: Fehlerbehebung                        ∫
  «ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ∂
  ∫ Korrektur von Fehlern der Version V1.23.                                  ∫
  »ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº




                                     @403[ Fortsetzung ]                   @001[ öbersicht ]
.403
    NET2000-Library : History - VersionsÑnderungen (Fortsetzung)

  …ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕª
  ∫ V1.22 -> V1.23  ≥ éLTERE VERSIONEN: Neue FunktionalitÑten/Fehlerbehebung  ∫
  «ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ∂
  ∫ - Adaption an die CP200.                                                  ∫
  ∫ - Adaption an die C220.                                                   ∫
  ∫                                                                           ∫
  ∫ Folgende Fehler wurden korrigiert:                                        ∫
  ∫ - PV-Namen mit einer LÑnge von 10 Zeichen wurden beim GetOV am Slave      ∫
  ∫   fallweise nicht gefunden.                                               ∫
  ∫ - Im Leerlauf hat NET2000 zuviel Systemzeit beansprucht.                  ∫
  ∫ - Beim Dienst GOS (Get-Objekt-Structure) konnte ein Zykluszeitfehler      ∫
  ∫   auftreten.                                                              ∫
  ∫ - Beim GetOV wurde "element_cnt" auf eine BytelÑnge begrenzt.             ∫
  ∫ - In einer bestimmten Konfiguration hat es sein kînnen, da· fÅr WRITE-    ∫
  ∫   AuftrÑge zu kleine Puffer geholt wurden.                                ∫
  »ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº



                                     @404[ Fortsetzung ]                   @001[ öbersicht ]
.404
    NET2000-Library : History - VersionsÑnderungen (Fortsetzung)

  …ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕª
  ∫ V1.22 -> V1.23  ≥ éLTERE VERSIONEN: Neue FunktionalitÑten/Fehlerbehebung  ∫
  «ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ∂
  ∫ Folgende Fehler wurden korrigiert:                                        ∫
  ∫ - Wurden Datenmodule wÑhrend der Laufzeit erzeugt oder gelîscht, wurde    ∫
  ∫   der NET2000-Manager resetiert, auch wenn die Steuervariable             ∫
  ∫   NET2000.ixnodel = 1 war. Dies hatte zur Folge, da· es zur Response-     ∫
  ∫   Timeouts auf dem Kommunikationspartner (Master) kommen konnte.          ∫
  ∫ - Auf Steuerungen mit einem BUGFIX >= V1.22 oder Panel mit BTSW >=V2.1    ∫
  ∫   verliert die Variable NET2000.ixnodel ihre Bedeutung, da die System-    ∫
  ∫   globale SG_PV_version eingefÅhrt wird.                                  ∫
  ∫   Die Referenz auf ein Modul-(De)Install wird damit hinfÑllig!            ∫
  ∫   SG_PV_version zeigt an, wenn PV-Offsets sich verschoben haben, und      ∫
  ∫   dann mu· sowieso ein neuen GetOV gemacht werden, um nicht falsche       ∫
  ∫   Adressen zu referenzieren.                                              ∫
  »ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº



                                       @200[ ANHANG ]                      @001[ öbersicht ]

.End
